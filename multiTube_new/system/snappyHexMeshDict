/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            false;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{


    shell
    {
        type            triSurfaceMesh;
        file            "shell.stl";
        
        
        regions
        {
            shell_inlet    { name shell_inlet; }
            shell_outlet       { name shell_outlet; }
            shell_external      { name shell_external; }
            solid_external        { name solid_external; }
            tube_inlet     { name tube_inlet; }
            tube_outlet        { name tube_outlet; } 
            tube_external       { name tube_external; }   
//            tube_to_solid       { name tube_to_solid; }               
//            shell_to_solid       { name shell_to_solid; }                                     
        }
        
        
    }
    
    
    tube_to_solid
    {
        type            triSurfaceMesh;
        file            "tube_to_solid.stl";        
    }
    
    shell_to_solid
    {
        type            triSurfaceMesh;
        file            "shell_to_solid.stl";        
    } 
    
}


// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 4000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 8000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 5;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 2;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.

    features
    (
    
    
        {
            file "shell.eMesh";
            file "shell_to_solid.eMesh";
            file "tube_to_solid.eMesh";            
            level 3;
        }
      
    );




    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
    
    /*
        motorBike
        {
            // Surface-wise min and max refinement level
            level (5 6);

            // Optional specification of patch type (default is wall). No
            // constraint types (cyclic, symmetry) etc. are allowed.
            patchInfo
            {
                type wall;
                inGroups (motorBikeGroup);
            }
        }
       */ 
  /*
        whole
        {
            level           (3 3);
            
            regions
            {
                shell_inlet           { level (3 3); patchInfo { type patch; } }
                shell_outlet           { level (3 3); patchInfo { type patch; } }
                shell_external           { level (3 3); patchInfo { type wall; } }
            solid_external        { level (3 3); patchInfo { type wall; } }
            tube_inlet     { level (3 3); patchInfo { type patch; }  }
            tube_outlet        { level (3 3); patchInfo { type patch; } }  
            tube_external           { level (3 3); patchInfo { type wall; } }        
            tube_to_solid           { level (3 3); patchInfo { type wall; } }              
            shell_to_solid           { level (3 3); patchInfo { type wall; } }                                    
            }
//            cellZone        shell;
//            cellZoneInside  insidePoint;
//            insidePoint (0 0.025 0.01);              
        }
        */
        shell
        {
            level           (2 2);
            
            regions
            {
                shell_inlet           { level (2 2); patchInfo { type patch; } }
                shell_outlet           { level (2 2); patchInfo { type patch; } }
                shell_external           { level (2 2); patchInfo { type wall; } }
            solid_external        { level (2 2); patchInfo { type wall; } }
            tube_inlet     { level (2 2); patchInfo { type patch; }  }
            tube_outlet        { level (2 2); patchInfo { type patch; } }  
            tube_external           { level (2 2); patchInfo { type wall; } }        
//            tube_to_solid           { level (2 2); patchInfo { type wall; } }              
//            shell_to_solid           { level (2 2); patchInfo { type wall; } }                                    
            }
//            cellZone        shell;
//            cellZoneInside  insidePoint;
//            insidePoint (0 0.025 0.01);              
        }
        

        tube_to_solid
        {
            level           (3 3);
           faceZone        tube_to_solid;
            cellZone        tube;
            cellZoneInside  insidePoint;
            insidePoint (0 0 0.1);            
                   
        }
        
        shell_to_solid
        {
            level           (3 3);
            faceZone        shell_to_solid;
            cellZone        shell;
            cellZoneInside  insidePoint;
            insidePoint (0 0.028 0.1);            
        }
        


        
    }

    // Resolve sharp angles
    resolveFeatureAngle 30;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
    /*
        refinementBox
        {
            mode inside;
            levels ((1E15 4));
        }

        shell
        {
            mode inside;
            levels ((3 3));
        }
        tube
        {
            mode inside;
            levels ((1e-3 3));
        }
        */
                        
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
//	locationInMesh (0 0.025 0.01);


    locationsInMesh (
    

    ((0 0.028 0.01) solid)

//     ((0 0.01825 0.01) tube)
//     ((0 -0.01825 0.01) tube)
//     ((0.0158 -0.009125 0.01) tube)
//     ((0.0158  0.009125 0.01) tube)
//     ((-0.0158 -0.009125 0.01) tube)
//     ((-0.0158 0.009125 0.01) tube)

//    ((0.01 0.025 0) shell)

    ); //cell remove acc. to the point
   


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
	//allowFreeStandingZoneFaces false;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 2.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
        nFeatureSnapIter 10;

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap false;

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        //- Detect points on multiple surfaces (only for explicitFeatureSnap)
        multiRegionFeatureSnap false;
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Per final patch (so not geometry!) the layer information
    layers
    {
        "(lowerWall|motorBike).*"
        {
            nSurfaceLayers 1;
        }
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.1;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 1.7.x! (didn't do anything in 1.7.x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 60;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
    // in 1.7.x.
    minMedialAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Write flags
writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-5;


// ************************************************************************* //
